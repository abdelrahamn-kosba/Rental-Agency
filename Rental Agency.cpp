#include <iostream>
#include <iomanip>
#include <cstring>
using namespace std;
class DayOfYear {
private:
	short unsigned int dayOfYear, year;
	static const int days[];
public:
	DayOfYear(short dayOfYear =1,short year=365)
{
this->dayOfYear = dayOfYear;
this->year = year;
}

	DayOfYear(int day, int month, int year)
{
this->dayOfYear = getDayOfYear(day,month);
this->year = year;
}

short getDayOfYear(int day, int month)
{
short dayOfYear=0 ;
for(int i=0;i<month;i++)
{
dayOfYear += days[i];
}
dayOfYear+=day;
return dayOfYear;
}

short get_dayOfYear()
{
return this->dayOfYear;
}

DayOfYear operator ++(const int i) {
		dayOfYear++;
		if (dayOfYear == 365) {
			dayOfYear = 1;
			year++;
		}
		return (i);
	}

 friend istream& operator >>(istream& cin, DayOfYear& D) {
		char S[50];
		cin >> S;
		int strSize = strlen(S);
		char YYYY[20];
		char MM[20];
		char DD[20];
        YYYY[0] = '\0';
		MM[0] = '\0';
		DD[0] = '\0';
		int cont = 0;
		int contM = 0;
		int contY = 0;
		int contD = 0;

		while (S[cont] != '-' && cont < strSize) {
			if (S[cont] >= '0' && S[cont] <= '9') {
				YYYY[contY++] = S[cont];
			}
			cont++;
		}

		cont++;

		while (S[cont] != '-' && cont < strSize) {
			if (S[cont] >= '0' && S[cont] <= '9') {
				MM[contM++] = S[cont];
			}
			cont++;
		}

		cont++;

		while (S[cont] != '-' && cont < strSize) {
			if (S[cont] >= '0' && S[cont] <= '9') {
				DD[contD++] = S[cont];
			}
			cont++;
		}

		YYYY[contY] = '\0';
		MM[contM] = '\0';
		DD[contD] = '\0';
		D.dayOfYear = days[atoi(MM) - 1] + atoi(DD);
		D.year = atoi(YYYY);
		return cin;
	}

friend ostream& operator << (ostream& cout, const DayOfYear D) {
		int dd,mm,yyyy;
		yyyy = D.year;
		for (int c = 0; c < 12; c++) {
			if (D.dayOfYear - 1 >= days[c] && D.dayOfYear - 1 < days[c + 1]) {
				dd = D.dayOfYear - days[c];
				mm = c + 1;
			}
			}
			cout << yyyy;
            cout << "-";
		if (mm < 10) {
			cout << "0";}
		  cout << mm;
		   cout << "-";
       if (dd < 10) {
			cout << "0";}
		    cout << dd;
    return cout;
	}};
const int DayOfYear::days[] = { 0, 31, 59, 90, 120, 151, 181, 212, 242, 273, 303, 334, 365 };
class Vehicle
{
public:
int no;
string model;
float price24h;
public:
Vehicle(int no,string model,float price24h)
{
this->no = no;
this->model = model;
this-> price24h = price24h;
}
Vehicle()
{
}
int get_no()
{
return this->no;
}
string get_model()
{
return this->model;
}
float get_price(int rentalDays)
{
return this->price24h*rentalDays;
}

virtual void print()=0; //a public pure virtual
virtual ~Vehicle() {
	};
};
class Bike:public Vehicle
{
public:

Bike(int no, string model)
{
this->no = no;
this->model = model;
this->price24h = 9.99;
}
void print()
{
		cout << this->get_no() << ": " << this->get_model() << " ";
		cout << "(Bike)";
	}


};
class EMotorVehicle: public Vehicle
{
public:
EMotorVehicle(int no,string model,float price24h)
{
this->no = no;
this->model = model;

}
EMotorVehicle()
{
}
virtual bool is_streetLegal()=0;
virtual void print()
{
if(!this->is_streetLegal()) cout<<"(not street legal)"<<endl;
else cout<<"no : "<<this->no<<", model : "<<this->model<<endl;
}
};
class EBike:public EMotorVehicle
{
public:
EBike(int no,string model,float price24h = 29.99)
{
this->no = no;
this->model = model;
this->price24h = price24h;
}
bool is_streetLegal()
{
return true;
}

void print()
{
cout<<"(EBkie) ";
EMotorVehicle::print();
}

};
class EScooter:public EMotorVehicle
{
private:
bool streetLegal;
public:
EScooter(int no,string model,float price24h = 19.99,bool streeLegal=false)
{
this->no = no;
this->model = model;
this->price24h = price24h;
this->streetLegal = streetLegal;
}
bool is_streetLegal()
{
return this->streetLegal;
}

void print()
{
cout<<"EScooter) ";
EMotorVehicle::print();
}
};
class Rental
{
private:
const int no = 478;
DayOfYear from;
int days;
string customer;
static int last_no ;// incremented each time a new object of this class is generated by the constructor


public:
Rental(string customer, DayOfYear from, int days = 1) : no(Rental::last_no++)//the attribute no shall get a new number using last_no
{
		this->from = from;
		this->days = days;
		this->customer = customer;

	}

int get_days()
{
return this->days;
}
DayOfYear get_from()
{
return this->from;
}
DayOfYear get_until()
{
DayOfYear until(this->from);
int rentalDays = this->days;
while(rentalDays--)
{
until ++;
}
return until;
}
void print()
{
cout<<this->from.get_dayOfYear()<<" to "<<this->get_until().get_dayOfYear()<<" with rental no. "<<this->no<<" for "<<this->customer<<endl;
}
};int Rental::last_no = 1;
class Schedule {
private:
	Vehicle* vehicle;
	Rental* year[365];
	Schedule* next;
public:
	Schedule(Vehicle* vehicle) {
		this->vehicle = vehicle;
		for (int c = 0; c < 365; c++) {
			this->year[c] = 0;
		}
		next = 0;
	}

	Vehicle* get_vehicle() //returning a pointer to the vehicle as function value.
    {
		return this->vehicle;
	}
	bool isFree(DayOfYear date, int days)//checked whether the whole time period will be free
    {
		for (int c = date.get_dayOfYear() - 1;c < date.get_dayOfYear() - 1 + days; c++) {
			if (year[c] != NULL) {
				return false;
			}
		}
		return true;
	}
	Schedule* get_next()// returning a pointer to the next schedule as function value.
    {
		return this->next;
	}
	void set_next(Schedule* next)//assigning the respective attribute.
    {
		this->next = next;
	}

	float book(string person, DayOfYear date, int days) {

		Rental* R = new Rental(person, date, days);

		for (int c = 0; c < days; c++) {
			this->year[date.get_dayOfYear() - 1 + c] = R;
		}

		return vehicle->get_price(days);
	}

	void print(DayOfYear date) {
		vehicle->print();

		if (year[date.get_dayOfYear() - 1] != NULL) {
			cout << endl;
			year[date.get_dayOfYear() - 1]->print();

		}}

	void print() {
		cout << "SCHEDULE FOR ";
		vehicle->print();
		for (int c = 0; c < 365; c++) {
			if (this->year[c] != NULL && this->year[c]->get_from().get_dayOfYear() == c+1) {
				cout << endl;
				this->year[c]->print();
				cout << ", total: " << this->get_vehicle()->get_price(this->year[c]->get_days()) << " EUR";
			}}}};
class Agency {
private:
		float profitPercent,profit;
        Schedule* head,*last;
public:
	Agency() {
		head = last = NULL;
		profitPercent = 20;
		profit = 0;

	}
	float get_profit() {
		return profit;
	}
	void set_profitPercentage(float P) {
		profitPercent = P;
	}
void add(Vehicle* v) {
		Schedule* S = new Schedule(v);
		if (head != NULL) {
			last->set_next(S);
			last = S;
			return;
		}
		head = S;
		last = S;
	}
	bool isFree(int VN, DayOfYear M, int D) {
		Schedule* S = this->searchFor(VN);
		if (S == NULL) {
			return true;
		}
	return S->isFree(M, D);
}
int chooseVehicle() {
    Schedule* s = head;
		while (s != NULL) {
			s->get_vehicle()->print();
			cout << endl;
			s = s->get_next();
		}
		int VN;
		cout << "choose vehicle no: ";
		cin >> VN;

    return VN;
	}
	float book(int VN, string C, DayOfYear S, int D) {
		Schedule* se = this->searchFor(VN);
		float prf = 0;
		float p = 0;
		if (se != NULL) {
			p = se->book(C, S, D);
			prf = p;
			prf *= profitPercent;
			prf /= 100.0;
			this->profit += prf;
		}
		return p;
	}
void print(DayOfYear start_date) {
Schedule* S = this->head;
while (S != NULL) {
S->print(start_date);
cout << endl;
S = S->get_next();
}
}
void print() {
Schedule* s = this->head;
while (s != NULL) {
s->print();
cout << endl;
s = s->get_next();
}
cout << "profit: " << setprecision(2) << fixed << this->get_profit() << " EUR" << endl;
}
protected:
	Schedule* searchFor(int NO) {
		Schedule* headCopy = this->head;
		Schedule* toBeReturned = NULL;
		bool isEnded = false;
		while (!isEnded) {
			if (headCopy == NULL) {
				break;
			}
			if (headCopy->get_vehicle()->get_no() == NO) {
				toBeReturned = headCopy;
				isEnded = true;
			}
			if (headCopy->get_next() == NULL) {
				isEnded = true;
			}
			else {
				headCopy = headCopy->get_next();
			}
		}

		return toBeReturned;
	}

};
int main() {
    cout<<"cosom el mancy";
	cout << "SIMPLIFIED SIMULATION OF A RENTAL AGENCY";
	cout << endl;
	cout << "========================================";
	cout << endl;
	string menuItems[20];
	menuItems[0] = "________________________________________\n";
	menuItems[1] = "MENUE\n";
	menuItems[2] = "A end of simulation\n";
	menuItems[3] = "B set new simulation date\n";
	menuItems[4] = "C new rental manually\n";
	menuItems[5] = "D print rental of today ";
	menuItems[6] = "E print rental of tomorrow ";
	menuItems[7] = "F print all rentals\n";
	menuItems[8] = "G print testingObject profit\n";
	menuItems[9] = "H set testingObject profit percent\n";
	menuItems[10] = "I add bikes\n";
	menuItems[11] = "J add E - bikes\n";
	menuItems[12] = "K add E - scooters\n";
	menuItems[13] = "L new rental simulation\n";
	menuItems[14] = "your choice : ";
	srand(time(NULL));
	DayOfYear firstDate(1, 2021);
	DayOfYear secondDate = firstDate;
	Agency testingObject;

	int vehs = 1;
	int IDbik = 1;
	int IDEBik = 1;
	int IDESc = 1;
	int cid = 1;


	char terminator = 'N';
	while (terminator != 'Y') {
		cout << menuItems[0];
		cout << menuItems[1];
		cout << menuItems[2];
		cout << menuItems[3];
		cout << menuItems[4];
		cout << menuItems[5] << firstDate << endl;
		cout << menuItems[6] << secondDate << endl;
		cout << menuItems[7];
		cout << menuItems[8];
		cout << menuItems[9];
		cout << menuItems[10];
		cout << menuItems[11];
		cout << menuItems[12];
		cout << menuItems[13];
		cout << menuItems[14];


		char userChoose;
		cin >> userChoose;
		DayOfYear date;
		int days;
		int numerVeh;
		string namerRenter;
		int quantityItems;
		int iterationsCounter;
		int number;
		string model;
		int i;

		switch(userChoose) {
		case 'A':
		case 'a':
			terminator = 'Y';
			break;

		case 'B':
		case 'b':
			cout << "input date of firstDate: ";
			cin >> firstDate;


			break;

		case 'C':
		case 'c':

			numerVeh = testingObject.chooseVehicle();
			cout << "day of rental : ";
			cin >> date;
			cout << "number of days : ";
			cin >> days;


			if (testingObject.isFree(numerVeh, date, days)) {
				cout << "input data vehicle renter name : " << endl;
				cin >> namerRenter;

				float price = testingObject.book(numerVeh, namerRenter, date, days);
				cout << "booked, price for this rental: " << setprecision(2) << fixed << price << " EUR" << endl;
			}
			else {
				cout << "sorry vehicle already booked" << endl;
			}

			break;

		case 'D':
		case 'd':
			cout << "SCHEDULE FOR " << firstDate << endl;
			testingObject.print(firstDate);
			break;

		case 'E':
		case 'e':
			cout << "SCHEDULE FOR " << secondDate << endl;
			testingObject.print(secondDate);
			break;

		case 'F':
		case 'f':
			testingObject.print();
			break;


		case 'G':
		case 'g':
			cout << "Agency profit: ";
			cout << testingObject.get_profit();
			cout << " EUR\n";
			break;

		case 'H':
		case 'h':
			cout << "Agency profit percent: ";
			float percentage;
			cin >> percentage;
			testingObject.set_profitPercentage(percentage);
			break;

		case 'I':
		case 'i':
			cout << "how many Bikes in this simulation? ";
			cin >> quantityItems;

			i = 0;
			while(i < quantityItems) {
				number = IDbik++;
				model = "City";

				testingObject.add(new Bike(vehs++, model));
				i++;
			}
			break;

		case 'J':
		case 'j':
			cout << "how many EBikes in this simulation? ";
			cin >> quantityItems;

			for (int i = 0; i < quantityItems; i++) {
				number = IDEBik++;
				model = "Trekky";

				testingObject.add(new EBike(vehs++, model));
			}
			break;

		case 'K':
		case 'k':
			cout << "how many EScooters in this simulation? ";
			cin >> quantityItems;

			for (int i = 0; i < quantityItems; i++) {
				number = IDESc++;
				model = "Scooty";

				testingObject.add(new EScooter(vehs++, model));
			}
			break;

		case 'L':
		case 'l':
			cout << "how many reservations to simulate? ";
			cin >> iterationsCounter;

			i = 0;
			while(i < iterationsCounter) {

				int randday = (rand() % 365);
				int randdays = (rand() % 10);
				int randveh = (rand() % vehs);
				DayOfYear date(randday + 1, 2021);
				int days = randdays + 1;
				int numerVeh = randveh + 1;
				string namerRenter = "customer";
				cid++;
				cout << "rental vehicle " << numerVeh << " from ";
				cout << date << " for " << days << " days ";

				if (testingObject.isFree(numerVeh, date, days)) {
					testingObject.book(numerVeh, namerRenter, date, days);
				}
				else {
					cout << "sorry vehicle already booked";
				}

				cout << endl;
				i++;

			}

			break;

		default:
			cout << "Invalid Input. Try Again." << endl;
			break;

		}



	}

	return 0;
}
